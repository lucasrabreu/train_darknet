    1  source activate tensorflow_p36
    2  git clone https://github.com/tensorflow/models.git
    3  v
    4  cd models/research/
    5  wget -O protobuf.zip https://github.com/google/protobuf/releases/download/v3.0.0/protoc-3.0.0-linux-x86_64.zip
    6  unzip protobuf.zip
    7  ./bin/protoc object_detection/protos/*.proto --python_out=.
    8  pip install tf_slim
    9  export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim
   10  python3 object_detection/builders/model_builder_test.py
   11  cd
   12  git clone https://github.com/lucasrabreu/obj_detection
   13  cd obj_detection
   14  mkdir images
   15  rm images/
   16  rm -r images/
   17  wget https://objdetectionfei.s3.amazonaws.com/imgs.zip
   18  unzip imgs.zip 
   19  ls
   20  mv imgs images
   21  ls images
   22  python3 clean_unused_imgs.py --base images
   23  python3 partition_dataser.py -x -i images/ -r 0.1
   24  ls images/test/
   25  ls images/train/
   26  rm -r im*
   27  wget https://objdetectionfei.s3.amazonaws.com/imageset_610.zip
   28  unzip imageset_610.zip 
   29  mv imageset_610.zip images
   30  python3 clean_unused_imgs.py --base images
   31  ls
   32  rm *.jpg
   33  ls
   34  wget https://objdetectionfei.s3.amazonaws.com/imageset_610.zip
   35  mkdir images
   36  mv imageset_610.zip images/
   37  rm -r images
   38  mv imageset_610.zip images/
   39  mkdir images
   40  mv imageset_610.zip images/
   41  cd images
   42  ls
   43  unzip imageset_610.zip 
   44  ls
   45  cd ..
   46  cd images/
   47  rm imageset_610.zip 
   48  cd ..
   49  python3 clean_unused_imgs.py --base images
   50  python3 partition_dataser.py -x -i images/ -r 0.1
   51  ls images/train/
   52  ls images/test/
   53  rm -r images/
   54  wget wget https://objdetectionfei.s3.amazonaws.com/imageset_610.zip
   55  wget https://objdetectionfei.s3.amazonaws.com/imgstotal.zip
   56  unzip imgstotal.zip 
   57  ls
   58  mv imgstotal images
   59  python3 clean_unused_imgs.py --base images
   60  python3 partition_dataser.py -x -i images/ -r 0.1
   61  ls images/test
   62  ls
   63  cat annotations/label_map.pbtxt 
   64  python3 xml_to_csv.py -i images/train -o annotations/train_labels.csv
   65  python3 xml_to_csv.py -i images/test -o annotations/test_labels.csv
   66  python3 generate_tfrecord.py --label0=ball --label1=robot --csv_input=annotations/train_labels.csv --output_path=annotations/train.record --img_path=images/train
   67  python3 generate_tfrecord.py  --label0=ball --label1=robot --csv_input=annotations/test_labels.csv --output_path=annotations/test.record --img_path=images/test
   68  wget http://download.tensorflow.org/models/object_detection/ssd_inception_v2_coco_2018_01_28.tar.gz
   69  tar -xzvf ssd_inception_v2_coco_2018_01_28.tar.gz 
   70  mv ssd_inception_v2_coco_2018_01_28 pre-trained-model
   71  ls
   72  wget https://raw.githubusercontent.com/tensorflow/models/master/research/object_detection/samples/configs/ssd_inception_v2_coco.config
   73  pip install pycocotools
   74  cd
   75  git clone https://github.com/cocodataset/cocoapi.git
   76  cd cocoapi/PythonAPI
   77  make
   78  cd
   79  cp -r cocoapi/PythonAPI/pycocotools/ models/research/
   80  cd obj_detection/
   81  nohup python3 model_main.py --alsologtostderr --model_dir=model_inception_v2_coco --pipeline_config_path=ssd_inception_v2_coco.config &
   82  cat nohup.out 
   83  nohup tensorboard --logdir=model_inception_v2_coco/ &
   84  cat nohup.out 
   85  tail -f nohup.out 
   86  cat nohup.out 
   87  htop
   88  sudo apt install htop
   89  htop
   90  cat nohup.out 
   91  source activate tensorflow_p36
   92  cd obj_detection/
   93  ls model_inception_v2_coco/
   94  ps -aux | grep python
   95  kill -9 23653
   96  ps -aux | grep python
   97  cd
   98  cd models/research/
   99  export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim
  100  cd
  101  cd obj_detection/
  102  ls
  103  wget http://download.tensorflow.org/models/object_detection/ssd_resnet50_v1_fpn_shared_box_predictor_640x640_coco14_sync_2018_07_03.tar.gz
  104  mv pre-trained-model/ pre-trained-model-inception-v2
  105  tar -xzvf ssd_resnet50_v1_fpn_shared_box_predictor_640x640_coco14_sync_2018_07_03.tar.gz 
  106  mv ssd_resnet50_v1_fpn_shared_box_predictor_640x640_coco14_sync_2018_07_03/ pre-trained-model
  107  wget https://raw.githubusercontent.com/tensorflow/models/master/research/object_detection/samples/configs/ssd_resnet50_v1_fpn_shared_box_predictor_640x640_coco14_sync.config
  108  source activate tensorflow_p36
  109  cd models/research/
  110  cd
  111  cd models/research/
  112  export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim
  113  cd
  114  cd obj_detection/
  115  mv nohup.out nohup.out.inception_v2_coco
  116  nohup python3 model_main.py --alsologtostderr --model_dir=model_resnet50_v1 --pipeline_config_path=ssd_resnet50_v1_fpn_shared_box_predictor_640x640_coco14_sync.config &
  117  cat nohup.out
  118  tensorboard --help
  119  nohup tensorboard --logdir=model_resnet50_v1/ --port=6007 &
  120  cat nohup.out
  121  reboot
  122  sudo reboot
  123  source activate tensorflow_p36
  124  cd models/research/
  125  export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim
  126  cd
  127  cd obj_detection/
  128  ls model_inception_v2_coco/
  129  python3 export_inference_graph.py     --input_type=image_tensor     --pipeline_config_path=ssdlite_mobilenet_v2_coco.config     --output_directory=model_inception_v2_coco_output     --trained_checkpoint_prefix=model_inception_v2_coco/model.ckpt-61969
  130  ls model_inception_v2_coco/
  131  ls *.config
  132  python3 export_inference_graph.py     --input_type=image_tensor     --pipeline_config_path=ssd_inception_v2_coco.config     --output_directory=model_inception_v2_coco_output     --trained_checkpoint_prefix=model_inception_v2_coco/model.ckpt-61969
  133  ls
  134  rm -r model_resnet50_v1/
  135  nohup python3 model_main.py --alsologtostderr --model_dir=model_resnet50_v1 --pipeline_config_path=ssd_resnet50_v1_fpn_shared_box_predictor_640x640_coco14_sync.config &
  136  cat nohup.out
  137  rm -r model_resnet50_v1/
  138  rm nohup.out
  139  nohup python3 model_main.py --alsologtostderr --model_dir=model_resnet50_v1 --pipeline_config_path=ssd_resnet50_v1_fpn_shared_box_predictor_640x640_coco14_sync.config &
  140  cat nohup.out
  141  git status
  142  git add ssd_resnet50_v1_fpn_shared_box_predictor_640x640_coco14_sync.config 
  143  git add README.md 
  144  git status
  145  git commit -m "resnet config e ajuste readme. Resnet config tem um parametro importante chamado fine_tune_checkpoint_type"
  146  git push
  147  cat nohup.out
  148  rm nohup.out
  149  rm -r model_resnet50_v1
  150  ls
  151  source activate tensorflow_p36
  152  cd models/research/
  153  export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim
  154  cd 
  155  cd obj_detection/
  156  rm -r model_resnet50_v1
  157  nohup python3 model_main.py     --alsologtostderr     --model_dir=model_resnet50_v1     --pipeline_config_path=ssd_resnet50_v1_fpn_shared_box_predictor_640x640_coco14_sync.config &
  158  cat nohup.out
  159  nohup tensorboard --logdir=model_resnet50_v1/ &
  160  kill -9 7708
  161  cat nohup.out
  162  cd models/research/
  163  ls
  164  cd obj_detection/
  165  ls
  166  history
  167  nohup tensorboard --logdir=model_resnet50_v1/ &
  168  source activate tensorflow_p36
  169  nohup tensorboard --logdir=model_resnet50_v1/ &
  170  cat nohup.out
  171  cd
  172  cd models/research/
  173  export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim
  174  cd
  175  cd obj_detection/
  176  ls
  177  history
  178  cd
  179  cd models/research/object_detection/
  180  ls
  181  cat eval_util.py 
  182  ls
  183  cat eval_util_test.py 
  184  ls
  185  cd
  186  mkdir yolo
  187  cd yolo/
  188  # CUDA: Let's check that Nvidia CUDA drivers are already pre-installed and which version is it.
  189  /usr/local/cuda/bin/nvcc --version
  190  env compute_capability=60
  191  git clone https://github.com/roboflow-ai/darknet.git
  192  cd /content/darknet/
  193  cd darknet/
  194  ls
  195  make
  196  wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.conv.137
  197  curl -L "https://app.roboflow.com/ds/bJ4ySRXEJJ?key=Lm0OEJNcRd" > roboflow.zip; unzip roboflow.zip; rm roboflow.zip
  198  cp train/_darknet.labels data/obj.names
  199  mkdir data/obj
  200  cp train/*.jpg data/obj/
  201  cp valid/*.jpg data/obj/
  202  cp train/*.txt data/obj/
  203  cp valid/*.txt data/obj/
  204  vim process_data.py
  205  python process_data.py 
  206  vim process_data_step2.py
  207  python process_data_step2.py 
  208  vim process_data_step2.py
  209  python process_data_step2.py 
  210  nohup ./darknet detector train data/obj.data cfg/custom-yolov4-detector.cfg yolov4.conv.137 -dont_show -map &
  211  cat nohup.out 
  212  sed -i 's/OPENCV=0/OPENCV=1/g' Makefile
  213  sed -i 's/GPU=0/GPU=1/g' Makefile
  214  sed -i 's/CUDNN=0/CUDNN=1/g' Makefile
  215  apt update
  216  sudo apt update
  217  sudo apt-get install libopencv-dev
  218  sudo apt update
  219  make
  220  nohup ./darknet detector train data/obj.data cfg/custom-yolov4-detector.cfg yolov4.conv.137 -dont_show -map &
  221  tail -f nohup.out 
  222  mv Makefile MakefileOld
  223  vim Makefile
  224  make
  225  rm Makefile
  226  vim Makefile
  227  make
  228  nohup ./darknet detector train data/obj.data cfg/custom-yolov4-detector.cfg yolov4.conv.137 -dont_show -map &
  229  tail -f nohup.out 
  230  git init
  231  git add README.md
  232  git commit -m "first commit"
  233  git branch -M main
  234  git remote add origin https://github.com/lucasrabreu/train_darknet.git
  235  git push -u origin main
  236  git status
  237  git add Makefile
  238  git add process_data*
  239  git status
  240  history >> comandos.txt
